{"version":3,"sources":["components/helpers/field.jsx","12/ValidasiLogin.jsx","pages/auth/FormLogin.jsx"],"names":["ReanderField","input","label","type","readOnly","placeholder","meta","touched","error","warning","react_default","a","createElement","className","htmlFor","Object","assign","onKeyPress","event","key","preventDefault","autoComplete","ValidasiLogin","value","errors","username","password","FormLogin","Component","[object Object]","args","super","this","state","render","onSubmit","props","handleSubmit","Field","name","component","isLoading","Fragment","Date","getFullYear","reduxForm","form","enableReinitialize","validate","connect"],"mappings":"8KAMO,MAAMA,EAAe,EAC1BC,QACAC,QACAC,OACAC,WACAC,cACAC,MAAQC,UAASC,QAAOC,cAExBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,GAAGD,UAAU,cACzBX,GAEHQ,EAAAC,EAAAC,cAAA,QAAAG,OAAAC,OAAA,CACEC,WAAaC,IACO,UAAdA,EAAMC,KACRD,EAAME,mBAINnB,EAPN,CAQEoB,aAAa,MACblB,KAAMA,EACNU,UAAU,eACVT,SAAUA,EACVC,YAAaA,KAEdE,IACGC,GACAE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,IAAmCL,EAAnC,OAGDC,GAAWC,EAAAC,EAAAC,cAAA,SAAIH,KCzBPa,MAbMC,IACnB,MAAMC,EAAS,GASf,OAPKD,EAAME,WACTD,EAAOC,SAAW,wBAEfF,EAAMG,WACTF,EAAOE,SAAW,wBAGbF,GCLX,MAAMG,UAAkBC,YAAUC,eAAAC,GAAAC,SAAAD,GAAAE,KAChCC,MAAQ,GACRC,SACE,OACExB,EAAAC,EAAAC,cAAA,QACEC,UAAU,kBACVsB,SAAUH,KAAKI,MAAMC,aACrBhB,aAAa,OAEbX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAEbH,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEC,KAAK,UACLC,UAAWxC,EACXG,KAAK,OACLD,MAAM,WACNG,YAAY,sBAGhBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEC,KAAK,WACLC,UAAWxC,EACXG,KAAK,WACLD,MAAM,WACNG,YAAY,sBAKhBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQT,KAAK,SAASU,UAAU,oCAC7BmB,KAAKI,MAAMK,UACV/B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+B,SAAA,KACEhC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BADf,sBAIA,UAKNH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCAAb,yCAC0C,IAAI8B,MAAOC,iBAQ7DjB,EAAYkB,YAAU,CACpBC,KAAM,YACNC,oBAAoB,EACpBC,SAAU1B,GAHAuB,CAITlB,GACYsB,wBAAUtB","file":"static/js/125.d917bfb3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport SelectSearch from \"react-select-search\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\n\r\nexport const ReanderField = ({\r\n  input,\r\n  label,\r\n  type,\r\n  readOnly,\r\n  placeholder,\r\n  meta: { touched, error, warning },\r\n}) => (\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"\" className=\"text-black\">\r\n      {label}\r\n    </label>\r\n    <input\r\n      onKeyPress={(event) => {\r\n        if (event.key === \"Enter\") {\r\n          event.preventDefault(); //<===== This stops the form from being submitted\r\n        } else {\r\n        }\r\n      }}\r\n      {...input}\r\n      autoComplete=\"off\"\r\n      type={type}\r\n      className=\"form-control\"\r\n      readOnly={readOnly}\r\n      placeholder={placeholder}\r\n    />\r\n    {touched &&\r\n      ((error && (\r\n        <ul className=\"parsley-errors-list filled\">\r\n          <li className=\"parsley-required\"> {error}.</li>\r\n        </ul>\r\n      )) ||\r\n        (warning && <p>{warning}</p>))}\r\n  </div>\r\n);\r\nexport const FormatNumber = ({\r\n  input,\r\n  label,\r\n  type,\r\n  readOnly,\r\n  placeholder,\r\n  meta: { touched, error, warning },\r\n}) => (\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"\" className=\"text-black\">\r\n      {label}\r\n    </label>\r\n    <NumberFormat\r\n      thousandSeparator={\".\"}\r\n      decimalSeparator={\",\"}\r\n      autoComplete=\"off\"\r\n      onKeyPress={(event) => {\r\n        if (event.key === \"Enter\") {\r\n          event.preventDefault(); //<===== This stops the form from being submitted\r\n        } else {\r\n        }\r\n      }}\r\n      {...input}\r\n      type={type}\r\n      inputmode=\"numeric\"\r\n      className=\"form-control\"\r\n      readOnly={readOnly}\r\n      placeholder={placeholder}\r\n    />\r\n    {touched &&\r\n      ((error && (\r\n        <ul className=\"parsley-errors-list filled\">\r\n          <li className=\"parsley-required\"> {error}.</li>\r\n        </ul>\r\n      )) ||\r\n        (warning && <p>{warning}</p>))}\r\n  </div>\r\n);\r\n\r\nexport const Gramasi = ({\r\n  input,\r\n  label,\r\n  type,\r\n  readOnly,\r\n  placeholder,\r\n  meta: { touched, error, warning },\r\n}) => (\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"\" className=\"text-black\">\r\n      {label}\r\n    </label>\r\n    <NumberFormat\r\n      format=\"#.###\"\r\n      autoComplete=\"off\"\r\n      thousandSeparator={\".\"}\r\n      // step={0.001}\r\n      decimalSeparator={\",\"}\r\n      onKeyPress={(event) => {\r\n        if (event.key === \"Enter\") {\r\n          event.preventDefault(); //<===== This stops the form from being submitted\r\n        } else {\r\n        }\r\n      }}\r\n      {...input}\r\n      type={type}\r\n      inputMode=\"numeric\"\r\n      className=\"form-control\"\r\n      readOnly={readOnly}\r\n      placeholder={placeholder}\r\n    />\r\n    {touched &&\r\n      ((error && (\r\n        <ul className=\"parsley-errors-list filled\">\r\n          <li className=\"parsley-required\"> {error}.</li>\r\n        </ul>\r\n      )) ||\r\n        (warning && <p>{warning}</p>))}\r\n  </div>\r\n);\r\n\r\n\r\n  \r\nexport const SkeletonLoading = ({\r\n  label,\r\n}) => (\r\n  <div className=\"form-group\">\r\n    <label> {label} </label>\r\n    <Skeleton className=\"form-control\" />\r\n  </div>\r\n);\r\n\r\nexport const ReanderSelect = ({\r\n  input,\r\n  label,\r\n  readOnly,\r\n  placeholder,\r\n  options,\r\n  value,\r\n  disabled,\r\n  meta: { touched, error, warning },\r\n}) => (\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"\" className=\"text-black\">\r\n      {label}\r\n    </label>\r\n    <SelectSearch\r\n      autoComplete=\"off\"\r\n      onKeyPress={(event) => {\r\n        if (event.key === \"Enter\") {\r\n          event.preventDefault(); //<===== This stops the form from being submitted\r\n        } else {\r\n        }\r\n      }}\r\n      {...input}\r\n      readOnly={readOnly}\r\n      search\r\n      disabled={disabled}\r\n      placeholder={placeholder}\r\n      options={options}\r\n    />\r\n    {/* <Select\r\n        value={value}\r\n        readOnly={readOnly}\r\n        disabled={disabled}\r\n        placeholder={placeholder}\r\n        options={options}\r\n     \r\n      /> */}\r\n\r\n    {touched &&\r\n      ((error && (\r\n        <ul className=\"parsley-errors-list filled\">\r\n          <li className=\"parsley-required\"> {error}.</li>\r\n        </ul>\r\n      )) ||\r\n        (warning && <p>{warning}</p>))}\r\n  </div>\r\n);\r\n\r\nexport const InputDate = ({\r\n  input,\r\n  label,\r\n  readOnly,\r\n  placeholder,\r\n  selected,\r\n  meta: { touched, error, warning },\r\n}) => (\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"\" className=\"text-black\">\r\n      {label}\r\n    </label>\r\n    <div className=\"customDatePickerWidth\">\r\n      <DatePicker\r\n        autoComplete=\"off\"\r\n        onKeyPress={(event) => {\r\n          if (event.key === \"Enter\") {\r\n            event.preventDefault(); //<===== This stops the form from being submitted\r\n          } else {\r\n          }\r\n        }}\r\n        {...input}\r\n        selected={selected}\r\n        className=\"form-control\"\r\n        readOnly={readOnly}\r\n        placeholder={placeholder}\r\n      />\r\n    </div>\r\n    {touched &&\r\n      ((error && (\r\n        <ul className=\"parsley-errors-list filled\">\r\n          <li className=\"parsley-required\"> {error}.</li>\r\n        </ul>\r\n      )) ||\r\n        (warning && <p>{warning}</p>))}\r\n  </div>\r\n);\r\n","const ValidasiLogin = (value) => {\r\n    const errors = {};\r\n    // console.log(event.charCode==13);\r\n    if (!value.username) {\r\n      errors.username = \"Username Harus Diisi\";\r\n    }\r\n    if (!value.password) {\r\n      errors.password = \"Password Harus Diisi\";\r\n    }\r\n  \r\n    return errors;\r\n  };\r\n  \r\n  export default ValidasiLogin;\r\n  ","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { ReanderField } from \"../../components/helpers/field\";\r\nimport ValidasiLogin from \"../../12/ValidasiLogin\";\r\nclass FormLogin extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"margin-bottom-0\"\r\n        onSubmit={this.props.handleSubmit}\r\n        autoComplete=\"off\"\r\n      >\r\n        <div className=\"form-group m-b-15\">\r\n          {/* <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Email Address\" required /> */}\r\n          <Field\r\n            name=\"user_id\"\r\n            component={ReanderField}\r\n            type=\"text\"\r\n            label=\"Username\"\r\n            placeholder=\"Masukan Username\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group m-b-15\">\r\n          <Field\r\n            name=\"password\"\r\n            component={ReanderField}\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            placeholder=\"Masukan Username\"\r\n          />\r\n          {/* <input type=\"password\" className=\"form-control form-control-lg\" placeholder=\"Password\" required /> */}\r\n        </div>\r\n\r\n        <div className=\"login-buttons\">\r\n          <button type=\"submit\" className=\"btn btn-success btn-block btn-lg\">\r\n            {this.props.isLoading ? (\r\n              <>\r\n                <i className=\"fas fa-spinner fa-spin\"></i> &nbsp; Sedang Login\r\n              </>\r\n            ) : (\r\n              \"Login\"\r\n            )}\r\n          </button>\r\n        </div>\r\n\r\n        <hr />\r\n        <p className=\"text-center text-grey-darker\">\r\n          &copy; Sambas Motor All Right Reserved {new Date().getFullYear()}\r\n        </p>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// export default FormLogin;\r\nFormLogin = reduxForm({\r\n  form: \"FormLogin\",\r\n  enableReinitialize: true,\r\n  validate: ValidasiLogin,\r\n})(FormLogin);\r\nexport default connect()(FormLogin);\r\n"],"sourceRoot":""}